version: "2"

services:
  mariadb:
    image: wodby/${MARIADB_IMAGE}
    container_name: "${COMPOSE_PROJECT_NAME}_mariadb"
    environment:
      MYSQL_ROOT_PASSWORD: ${DEFAULT_DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DEFAULT_DB_NAME}
      MYSQL_USER: ${DEFAULT_DB_USER}
      MYSQL_PASSWORD: ${DEFAULT_DB_PASSWORD}
#    volumes:
#      - ./mariadb-init:/docker-entrypoint-initdb.d # Place init .sql file(s) here.
#      - /path/to/mariadb/data/on/host:/var/lib/mysql # I want to manage volumes manually.
    networks:
      - front

#  postgres:
#    image: wodby/${POSTGRES_IMAGE}
#    container_name: "${COMPOSE_PROJECT_NAME}_postgres"
#    environment:
#      POSTGRES_PASSWORD: ${DEFAULT_DB_PASSWORD}
#      POSTGRES_DB: ${DEFAULT_DB_NAME}
#      POSTGRES_USER: ${DEFAULT_DB_USER}
#    volumes:
#      - ./postgres-init:/docker-entrypoint-initdb.d # Place init file(s) here.
#      - /path/to/postgres/data/on/host:/var/lib/postgresql/data # I want to manage volumes manually.
#    networks:
#      - front

  php:
    image: wodby/${PHP_IMAGE}
    container_name: "${COMPOSE_PROJECT_NAME}_php"
    environment:
      PHP_SENDMAIL_PATH: /usr/sbin/sendmail -t -i -S mailhog:1025
      PHP_FPM_CLEAR_ENV: "no"
      DB_HOST: ${DEFAULT_DB_HOST}
      DB_USER: ${DEFAULT_DB_USER}
      DB_PASSWORD: ${DEFAULT_DB_PASSWORD}
      DB_NAME: ${DEFAULT_DB_NAME}
      DB_DRIVER: ${DEFAULT_DB_DRIVER}
#      PHP_XDEBUG: 1
#      PHP_XDEBUG_DEFAULT_ENABLE: 1
#      PHP_XDEBUG_REMOTE_CONNECT_BACK: 0
#      PHP_XDEBUG_REMOTE_HOST: "10.254.254.254"
#      PHP_XDEBUG_PROFILER_OUTPUT_DIR: /mnt/files/xdebug/profiler
#      PHP_XDEBUG_TRACE_OUTPUT_DIR: /mnt/files/xdebug/traces
#      PHP_BLACKFIRE: 1
    volumes:
      - codebase:/var/www/html
## Options for macOS users (https://docker4drupal.readthedocs.io/en/latest/macos)
#      - codebase:/var/www/html:cached # User-guided caching
#      - docker-sync:/var/www/html # Docker-sync
## For Xdebug profiler files
#      - files:/mnt/files
    networks:
      - front

  nginx:
    image: wodby/${NGINX_IMAGE}
    container_name: "${COMPOSE_PROJECT_NAME}_nginx"
    depends_on:
      - php
    environment:
      NGINX_STATIC_CONTENT_OPEN_FILE_CACHE: "off"
      NGINX_ERROR_LOG_LEVEL: debug
      NGINX_BACKEND_HOST: php
      NGINX_SERVER_ROOT: /var/www/html/web
#      NGINX_DRUPAL_FILE_PROXY_URL: http://example.com
    volumes:
      - codebase:/var/www/html
# Options for macOS users (https://docker4drupal.readthedocs.io/en/latest/macos)
#      - codebase:/var/www/html:cached # User-guided caching
#      - docker-sync:/var/www/html # Docker-sync
    labels:
      - 'traefik.backend=${COMPOSE_PROJECT_NAME}_nginx'
      - 'traefik.port=80'
      - 'traefik.frontend.rule=Host:drupal.docker.localhost'
    networks:
      - front

#  apache:
#    image: wodby/${APACHE_IMAGE}
#    container_name: "${COMPOSE_PROJECT_NAME}_apache"
#    depends_on:
#      - php
#    environment:
#      APACHE_LOG_LEVEL: debug
#      APACHE_BACKEND_HOST: php
#      APACHE_SERVER_ROOT: /var/www/html/web
#    volumes:
#      - codebase:/var/www/html
## Options for macOS users (https://docker4drupal.readthedocs.io/en/latest/macos)
##      - codebase:/var/www/html:cached # User-guided caching
##      - docker-sync:/var/www/html # Docker-sync
#    labels:
#      - 'traefik.backend=${COMPOSE_PROJECT_NAME}_apache'
#      - 'traefik.port=80'
#      - 'traefik.frontend.rule=Host:drupal.docker.localhost'
#    networks:
#      - front

#  varnish:
#    image: wodby/${VARNISH_IMAGE}
#    container_name: "${COMPOSE_PROJECT_NAME}_varnish"
#    depends_on:
#      - nginx
#    environment:
#      VARNISH_SECRET: secret
#      VARNISH_BACKEND_HOST: nginx
#      VARNISH_BACKEND_PORT: 80
#    labels:
#      - 'traefik.backend=${COMPOSE_PROJECT_NAME}_varnish'
#      - 'traefik.port=6081'
#      - 'traefik.frontend.rule=Host:varnish.drupal.docker.localhost'
#    networks:
#      - front

#  redis:
#    image: wodby/${REDIS_IMAGE}
#    container_name: "${COMPOSE_PROJECT_NAME}_redis"
#    networks:
#      - front

#  adminer:
#    image: wodby/${ADMINER_IMAGE}
#    container_name: "${COMPOSE_PROJECT_NAME}_adminer"
#    environment:
#      ADMINER_SALT: adminer-salt
#    labels:
#      - 'traefik.backend=${COMPOSE_PROJECT_NAME}_adminer'
#      - 'traefik.port=9000'
#      - 'traefik.frontend.rule=Host:adminer.drupal.docker.localhost'
#    networks:
#      - front

#  pma:
#    image: phpmyadmin/phpmyadmin
#    container_name: "${COMPOSE_PROJECT_NAME}_pma"
#    environment:
#      PMA_HOST: mariadb
#      PMA_USER: ${DEFAULT_DB_USER}
#      PMA_PASSWORD: ${DEFAULT_DB_PASSWORD}
#      PHP_UPLOAD_MAX_FILESIZE: 1G
#      PHP_MAX_INPUT_VARS: 1G
#    labels:
#      - 'traefik.backend=${COMPOSE_PROJECT_NAME}_pma'
#      - 'traefik.port=80'
#      - 'traefik.frontend.rule=Host:pma.drupal.docker.localhost'
#    networks:
#      - front

#  solr:
#    image: wodby/${SOLR_IMAGE}
#    container_name: "${COMPOSE_PROJECT_NAME}_solr"
#    environment:
#      SOLR_HEAP: 1024m
#    labels:
#      - 'traefik.backend=${COMPOSE_PROJECT_NAME}_solr'
#      - 'traefik.port=8983'
#      - 'traefik.frontend.rule=Host:solr.drupal.docker.localhost'
#    networks:
#      - front

  mailhog:
    image: mailhog/mailhog
    container_name: "${COMPOSE_PROJECT_NAME}_mailhog"
    labels:
      - 'traefik.backend=${COMPOSE_PROJECT_NAME}_mailhog'
      - 'traefik.port=8025'
      - 'traefik.frontend.rule=Host:mailhog.drupal.docker.localhost'
    networks:
      - front

#  nodejs:
#    image: wodby/${NODEJS_IMAGE}
#    container_name: "${COMPOSE_PROJECT_NAME}_nodejs"
#    environment:
#       NODE_SERVICE_KEY: ${NODEJS_SERVICE_KEY}
#    labels:
#      - 'traefik.backend=${COMPOSE_PROJECT_NAME}_nodejs'
#      - 'traefik.port=8080'
#      - 'traefik.frontend.rule=Host:nodejs.drupal.docker.localhost'
#    volumes:
#      - ./path/to/your/single-page-app:/app
#    command: sh -c 'npm install && npm run start'
#    networks:
#      - front

#  node:
#    image: node:alpine
#    container_name: "${COMPOSE_PROJECT_NAME}_node"
#    working_dir: /app
#    labels:
#      - 'traefik.backend=${COMPOSE_PROJECT_NAME}_node'
#      - 'traefik.port=3000'
#      - 'traefik.frontend.rule=Host:front.drupal.docker.localhost'
#    expose:
#      - "3000"
#    volumes:
#      - ./path/to/your/single-page-app:/app
#    command: sh -c 'npm install && npm run start'
#    networks:
#      - front

#  memcached:
#    image: wodby/${MEMCACHED_IMAGE}
#    container_name: "${COMPOSE_PROJECT_NAME}_memcached"
#    networks:
#      - front

#  rsyslog:
#    image: wodby/${RSYSLOG_IMAGE}
#    container_name: "${COMPOSE_PROJECT_NAME}_rsyslog"
#    networks:
#      - front

#  athenapdf:
#    image: arachnysdocker/athenapdf-service:2.10.0
#    container_name: "${COMPOSE_PROJECT_NAME}_athenapdf"
#    environment:
#      WEAVER_AUTH_KEY: weaver-auth-key
#      WEAVER_ATHENA_CMD: "athenapdf -S"
#      WEAVER_MAX_WORKERS: 10
#      WEAVER_MAX_CONVERSION_QUEUE: 50
#      WEAVER_WORKER_TIMEOUT: 90
#      WEAVER_CONVERSION_FALLBACK: false
#    networks:
#      - front

#  blackfire:
#    image: blackfire/blackfire
#    container_name: "${COMPOSE_PROJECT_NAME}_blackfire"
#    environment:
#      BLACKFIRE_SERVER_ID: ${BLACKFIRE_SERVER_ID}
#      BLACKFIRE_SERVER_TOKEN: ${BLACKFIRE_SERVER_TOKEN}
#    networks:
#      - front

#  webgrind:
#    image: wodby/${WEBGRIND_IMAGE}
#    container_name: "${COMPOSE_PROJECT_NAME}_webgrind"
#    environment:
#      WEBGRIND_PROFILER_DIR: /mnt/files/xdebug/profiler
#    labels:
#      - 'traefik.backend=${COMPOSE_PROJECT_NAME}_webgrind'
#      - 'traefik.port=8080'
#      - 'traefik.frontend.rule=Host:webgrind.drupal.docker.localhost'
#    volumes:
#      - files:/mnt/files
#    networks:
#      - front

  portainer:
    image: portainer/portainer
    container_name: "${COMPOSE_PROJECT_NAME}_portainer"
    command: --no-auth -H unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - 'traefik.backend=${COMPOSE_PROJECT_NAME}_portainer'
      - 'traefik.port=9000'
      - 'traefik.frontend.rule=Host:portainer.drupal.docker.localhost'
    networks:
      - front

  traefik:
    image: traefik
    container_name: "${COMPOSE_PROJECT_NAME}_traefik"
    command: -c /dev/null --web --docker --logLevel=INFO
    ports:
      - '8000:80'
#      - '8080:8080' # Dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - front

volumes:
  codebase:
## Docker-sync for macOS users
#  docker-sync:
#    external: true
## For Xdebug profiler
#  files:

networks:
  front:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: "${IP_RANGE}"
